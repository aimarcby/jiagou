隔离设计：
一、系统的分离有两种方式：
1、按服务的种类做分离
 使用不同的域名、服务器和数据库，做到从接入层到应用层再到数据层三层完全隔离；

 不足：
 1）单页面多服务的资源使用影响性能；
 解决方法：尽可能减少单页面多服务的调用；
 2）在大数据场景下，数据计算复杂度较高
 解决方法：需要选取合适的中间件，对数据进行抽取；
 3）跨板块的调用业务故障影响整体业务；
 解决方法：保证各子业务的高可用性，业务流程上做step-by-step，缓存业务状态，避免应为故障导致用户从头执行；
 4）跨板块的数据交互复杂；
 解决方法：使用消息中间件，打通各板块数据和信息交换；
 5）多板块分布式事务；
 解决方案：使用二阶段提交；

2、以用户做分离（多租户模式）
 多租户做法有三种：
 1）完全独立的设计。每个租户有完全独立的服务和数据；
 2）独立的数据分区，共享的服务。多租户的服务是共享的，但数据是分开隔离的；
 3）共享的服务，共享的数据分区。每个租户的数据和服务都是共享的。
 
 三者优缺点：
 1）完全独立的方案：开发实现上资源隔离效果好，但成本较高；
 2）完全共享的方案：开发难度大，数据资源隔离效果不好。
 
 一般用户采用服务共享，数据隔离的方案；对重点用户采用完全隔离方案；
 可通过虚拟化技术实现资源的完全隔离，通过底层虚拟化，实现物理资源的共享和成本的节约。

3、隔离设计的重点：
 1、控制好隔离业务的大小和粒度（领域驱动设计方式DDD应该可以做参考）；
 2、需要考虑系统的复杂度、成本、性能、资源使用的问题，做好权衡；
 3、隔离模式需要配置一些高可用、重试、异步、消息中间件，流控、熔断等设计模式的方式额配套使用。
 4、分布式系统的运维复杂度非常高，需要自动化的运维工具，可以用容器、虚拟化等技术管理资源。
 5、需要完整的服务监控系统。
